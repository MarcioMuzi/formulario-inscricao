@page "/enrollments"
@rendermode InteractiveServer
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using WebApp.Data
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@inject AppDbContext Db

<MudPaper Class="p-6">
  <MudText Typo="Typo.h4" Class="mb-4">Inscrições (últimas 20)</MudText>

  @if (_items?.Count == 0)
  {
    <MudAlert Severity="Severity.Info">Nenhuma inscrição encontrada.</MudAlert>
  }
  else
  {
    <MudText Typo="Typo.body2" Class="mb-2">Total exibido: @_items.Count</MudText>

    <MudTable Items="_items" Dense="true" Hover="true">
      <HeaderContent>
        <MudTh style="width:80px">ID</MudTh>
        <MudTh>Nome</MudTh>
        <MudTh>E-mail</MudTh>
        <MudTh style="width:140px">Curso</MudTh>
        <MudTh style="width:120px">Gênero</MudTh>
        <MudTh style="width:140px">Titulação</MudTh>
        <MudTh style="width:140px">Telefone</MudTh>
        <MudTh style="width:140px">CPF</MudTh>
        <MudTh style="width:220px">Orgão/Instituição</MudTh>
        <MudTh style="width:180px">Criado em</MudTh>
      </HeaderContent>
      <RowTemplate>
        <MudTd DataLabel="ID">@context.Id</MudTd>
        <MudTd DataLabel="Nome">@context.FullName</MudTd>
        <MudTd DataLabel="E-mail">@context.Email</MudTd>
        <MudTd DataLabel="Curso">@((string.IsNullOrWhiteSpace(context.Course) ? "-" : context.Course))</MudTd>
        <MudTd DataLabel="Gênero">@context.Gender</MudTd>
        <MudTd DataLabel="Titulação">@((context.Degree?.Name) ?? "-")</MudTd>
        <MudTd DataLabel="Telefone">@FormatPhone(context.MobilePhone)</MudTd>
        <MudTd DataLabel="CPF">@FormatCpf(context.Cpf)</MudTd>
        <MudTd DataLabel="Orgão/Instituição">@context.Organization</MudTd>
        <MudTd DataLabel="Criado em">@context.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudTd>
      </RowTemplate>
    </MudTable>
  }
</MudPaper>

@code {
  List<Enrollment> _items = new();

  protected override async Task OnInitializedAsync()
  {
    _items = await Db.Enrollments
      .Include(e => e.Degree)
      .OrderByDescending(e => e.Id)
      .Take(20)
      .ToListAsync();
  }

  static string FormatPhone(string? digits)
  {
    if (string.IsNullOrWhiteSpace(digits)) return "-";
    var d = new string(digits.Where(char.IsDigit).ToArray());
    if (d.Length == 11)
      return $"({d[..2]}) {d.Substring(2,5)}-{d.Substring(7,4)}";
    return digits;
  }

  static string FormatCpf(string? digits)
  {
    if (string.IsNullOrWhiteSpace(digits)) return "-";
    var d = new string(digits.Where(char.IsDigit).ToArray());
    if (d.Length == 11)
      return $"{d[..3]}.{d.Substring(3,3)}.{d.Substring(6,3)}-{d.Substring(9,2)}";
    return digits;
  }
}
