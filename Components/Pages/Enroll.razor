@page "/enroll"
@rendermode InteractiveServer
@using WebApp.Data
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db
@inject ISnackbar Snackbar

<MudPaper Class="p-6 max-w-xl">
  <MudText Typo="Typo.h4" Class="mb-4">Inscrição</MudText>

  <!-- EditForm é o ÚNICO form. DataAnnotationsValidator usa o EditContext dele -->
  <EditForm EditContext="_editContext" OnValidSubmit="Salvar">
    <DataAnnotationsValidator />

    <MudTextField @bind-Value="_vm.FullName"
                  For="@(() => _vm.FullName)"
                  Label="Nome completo"
                  Required="true"
                  RequiredError="Informe seu nome completo"
                  Immediate="true" />

    <MudTextField @bind-Value="_vm.Email"
                  For="@(() => _vm.Email)"
                  Label="E-mail"
                  Required="true"
                  RequiredError="Informe um e-mail válido"
                  Immediate="true" />

    <MudSelect T="string" @bind-Value="_vm.Course" Label="Curso (opcional)" Clearable="true">
      <MudSelectItem Value="@("ASP.NET")">ASP.NET</MudSelectItem>
      <MudSelectItem Value="@("Blazor")">Blazor</MudSelectItem>
      <MudSelectItem Value="@("SQL Server")">SQL Server</MudSelectItem>
    </MudSelect>

    <MudTextField @bind-Value="_vm.MobilePhone"
                  For="@(() => _vm.MobilePhone)"
                  Label="Telefone celular (WhatsApp)"
                  Required="true"
                  RequiredError="Informe o telefone"
                  Mask="@(new PatternMask("(00) 00000-0000"))"
                  Immediate="true" />

    <MudTextField @bind-Value="_vm.Cpf"
                  For="@(() => _vm.Cpf)"
                  Label="CPF"
                  Required="true"
                  RequiredError="Informe o CPF"
                  Mask="@(new PatternMask("000.000.000-00"))"
                  Immediate="true" />

    <MudSelect T="string"
               @bind-Value="_vm.Gender"
               For="@(() => _vm.Gender)"
               Label="Gênero"
               Required="true"
               RequiredError="Selecione o gênero">
      <MudSelectItem Value="@("Masculino")">Masculino</MudSelectItem>
      <MudSelectItem Value="@("Feminino")">Feminino</MudSelectItem>
      <MudSelectItem Value="@("Outro")">Outro</MudSelectItem>
    </MudSelect>

    <MudTextField @bind-Value="_vm.Organization"
                  For="@(() => _vm.Organization)"
                  Label="Orgão/Instituição"
                  Required="true"
                  RequiredError="Informe o órgão/Instituição"
                  Immediate="true" />

    <MudSelect T="int"
               @bind-Value="_vm.DegreeId"
               For="@(() => _vm.DegreeId)"
               Label="Titulação"
               Required="true"
               RequiredError="Selecione a titulação">
      @if (_degrees is not null)
      {
        @foreach (var d in _degrees)
        {
          <MudSelectItem Value="@d.Id">@d.Name</MudSelectItem>
        }
      }
    </MudSelect>

    <MudButton ButtonType="ButtonType.Submit"
               Variant="Variant.Filled"
               Class="mt-4"
               Disabled="_saving"
               Loading="_saving">
      Enviar
    </MudButton>
  </EditForm>

  @if (!string.IsNullOrEmpty(_msg))
  {
    <MudAlert Severity="Severity.Success" Class="mt-4">@_msg</MudAlert>
  }
</MudPaper>

@code {
  // ViewModel da tela (validações alinhadas ao modelo)
  public class EnrollmentInput
  {
    [Required(ErrorMessage = "Informe seu nome completo")]
    [StringLength(200, ErrorMessage = "Use no máximo {1} caracteres")]
    public string? FullName { get; set; }

    [Required(ErrorMessage = "Informe um e-mail válido")]
    [EmailAddress(ErrorMessage = "E-mail em formato inválido")]
    [StringLength(256, ErrorMessage = "Use no máximo {1} caracteres")]
    public string? Email { get; set; }

    [StringLength(100, ErrorMessage = "Use no máximo {1} caracteres")]
    public string? Course { get; set; }

    [Required(ErrorMessage = "Informe o telefone")]
    [StringLength(15, MinimumLength = 15, ErrorMessage = "Preencha o telefone completo")]
    public string? MobilePhone { get; set; }

    [Required(ErrorMessage = "Informe o CPF")]
    [StringLength(14, MinimumLength = 14, ErrorMessage = "Preencha o CPF completo")]
    public string? Cpf { get; set; }

    [Required(ErrorMessage = "Selecione o gênero")]
    [RegularExpression("^(Masculino|Feminino|Outro)$", ErrorMessage = "Selecione uma opção válida")]
    public string? Gender { get; set; }

    [Required(ErrorMessage = "Informe o órgão/Instituição")]
    [StringLength(200, ErrorMessage = "Use no máximo {1} caracteres")]
    public string? Organization { get; set; }

    [Range(1, int.MaxValue, ErrorMessage = "Selecione a titulação")]
    public int DegreeId { get; set; }
  }

  EnrollmentInput _vm = new();
  EditContext _editContext = default!;
  bool _saving;
  string? _msg;
  List<Degree> _degrees = new();

  protected override async Task OnInitializedAsync()
  {
    _vm = new EnrollmentInput();
    _editContext = new EditContext(_vm);
    _degrees = await Db.Degrees.OrderBy(d => d.Id).ToListAsync();
  }

  static string OnlyDigits(string value) => new(value.Where(char.IsDigit).ToArray());

  async Task Salvar()
  {
    if (_saving) return;
    _saving = true;
    _msg = null;

    try
    {
      // Sanitização para gravar só dígitos
      var phoneDigits = OnlyDigits(_vm.MobilePhone ?? "");
      var cpfDigits = OnlyDigits(_vm.Cpf ?? "");

      if (phoneDigits.Length != 11)
      {
        Snackbar.Add("Telefone inválido. Use 11 dígitos (DDD + número).", Severity.Error);
        return;
      }
      if (cpfDigits.Length != 11)
      {
        Snackbar.Add("CPF inválido. Deve conter 11 dígitos.", Severity.Error);
        return;
      }

      var entity = new Enrollment
      {
        FullName    = _vm.FullName!,
        Email       = _vm.Email!,
        Course      = string.IsNullOrWhiteSpace(_vm.Course) ? null : _vm.Course,
        MobilePhone = phoneDigits,
        Cpf         = cpfDigits,
        Gender      = _vm.Gender!,
        Organization= _vm.Organization!,
        DegreeId    = _vm.DegreeId,
        CreatedAt   = DateTime.UtcNow
      };

      Db.Enrollments.Add(entity);
      await Db.SaveChangesAsync();

      _msg = $"Inscrição #{entity.Id} criada.";
      Snackbar.Add(_msg, Severity.Success);

      // Reset do form: novo VM + novo EditContext (limpa campos e validações)
      _vm = new EnrollmentInput();
      _editContext = new EditContext(_vm);
    }
    catch
    {
      Snackbar.Add("Falha ao salvar a inscrição. Tente novamente.", Severity.Error);
    }
    finally
    {
      _saving = false;
      StateHasChanged();
    }
  }
}
